# -*- coding: utf-8 -*-
"""LVADSUSR96_Loghapriya_FA_Lab1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vhFS-dPHgGyPhACzMnfqv0-ZvqMHq3xx
"""

import pandas as pd
df = pd.read_csv("/content/sample_data/loan_approval.csv")
df = pd.DataFrame(df)
df.head()

df.columns = df.columns.str.strip()

df.columns

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

print(df.isnull().sum())
df.dropna(inplace=True)
print(df.duplicated())
print(df.describe())
print("\nShape of data:",df.shape)

Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR = Q3 - Q1

outliers = ((df < (Q1 - 1.5 * IQR)) | (df > (Q3 + 1.5 * IQR))).any(axis=1)
print(outliers)
df = df[~outliers]

sns.countplot(x='loan_status', data=df)
plt.title('Loan Approval Status')
plt.show()

categorical_cols = ['education', 'self_employed']
plt.figure(figsize=(12, 6))
for i, col in enumerate(categorical_cols, 1):
    plt.subplot(1, 2, i)
    sns.countplot(x=col, hue='loan_status', data=df)
    plt.title(f'Relationship between {col} and Loan Approval Status')
plt.tight_layout()
plt.show()

df1 = pd.get_dummies(df, columns=['education', 'self_employed'])
X = df1.drop('loan_status', axis=1)
y = df1['loan_status']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)
y_pred = model.predict(X_test_scaled)

accuracy = accuracy_score(y_test, y_pred)
print("\nAccuracy:", accuracy)
print("\nClassification Report:")
print(classification_report(y_test, y_pred))
print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))

user_input = {
    'no_of_dependents': 2,
    'education': 'Graduate',
    'self_employed': 'No',
    'income_annum': 9600000,
    'loan_amount': 299000,
    'loan_term': 12,
    'cibil_score': 800,
    'residential_assets_value': 2400000,
    'commercial_assets_value': 160000,
    'luxury_assets_value': 27000,
    'bank_asset_value': 6700000
}

user_df = pd.DataFrame(user_input, index=[0])
user_df = pd.get_dummies(user_df)
missing_cols = set(X_train.columns) - set(user_df.columns)
for col in missing_cols:
    user_df[col] = 0
user_df = user_df[X_train.columns]
user_scaled = scaler.transform(user_df)
prediction = model.predict(user_scaled)
print("\nPrediction for User Input:", prediction[0])